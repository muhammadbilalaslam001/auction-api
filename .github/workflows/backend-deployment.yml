
name: CI/CD for Next.js Backend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem

          scp -o StrictHostKeyChecking=no -i ec2-key.pem docker-compose.yml .env $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/
          scp -o StrictHostKeyChecking=no -i ec2-key.pem -r ./* $EC2_USER@$EC2_HOST:/home/$EC2_USER/auction-api/

          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST << EOF
            cd /home/$EC2_USER/auction-api

            if ! [ -x "$(command -v docker)" ]; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi

            if ! [ -x "$(command -v docker-compose)" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Pull latest images, build, and restart the services
            docker-compose down
            docker-compose up -d --build
          EOF
